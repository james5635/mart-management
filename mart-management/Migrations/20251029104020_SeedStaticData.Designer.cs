// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mart_management;

#nullable disable

namespace mart_management.Migrations
{
    [DbContext(typeof(MartManagementContext))]
    [Migration("20251029104020_SeedStaticData")]
    partial class SeedStaticData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("mart_management.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Category 1",
                            Description = "Description for Category 1"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "Category 2",
                            Description = "Description for Category 2"
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryName = "Category 3",
                            Description = "Description for Category 3"
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryName = "Category 4",
                            Description = "Description for Category 4"
                        },
                        new
                        {
                            CategoryID = 5,
                            CategoryName = "Category 5",
                            Description = "Description for Category 5"
                        },
                        new
                        {
                            CategoryID = 6,
                            CategoryName = "Category 6",
                            Description = "Description for Category 6"
                        },
                        new
                        {
                            CategoryID = 7,
                            CategoryName = "Category 7",
                            Description = "Description for Category 7"
                        },
                        new
                        {
                            CategoryID = 8,
                            CategoryName = "Category 8",
                            Description = "Description for Category 8"
                        },
                        new
                        {
                            CategoryID = 9,
                            CategoryName = "Category 9",
                            Description = "Description for Category 9"
                        },
                        new
                        {
                            CategoryID = 10,
                            CategoryName = "Category 10",
                            Description = "Description for Category 10"
                        });
                });

            modelBuilder.Entity("mart_management.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerID = 1,
                            Address = "Customer Address 1",
                            CustomerName = "Customer 1",
                            Email = "customer1@example.com",
                            Phone = "0987654301"
                        },
                        new
                        {
                            CustomerID = 2,
                            Address = "Customer Address 2",
                            CustomerName = "Customer 2",
                            Email = "customer2@example.com",
                            Phone = "0987654302"
                        },
                        new
                        {
                            CustomerID = 3,
                            Address = "Customer Address 3",
                            CustomerName = "Customer 3",
                            Email = "customer3@example.com",
                            Phone = "0987654303"
                        },
                        new
                        {
                            CustomerID = 4,
                            Address = "Customer Address 4",
                            CustomerName = "Customer 4",
                            Email = "customer4@example.com",
                            Phone = "0987654304"
                        },
                        new
                        {
                            CustomerID = 5,
                            Address = "Customer Address 5",
                            CustomerName = "Customer 5",
                            Email = "customer5@example.com",
                            Phone = "0987654305"
                        },
                        new
                        {
                            CustomerID = 6,
                            Address = "Customer Address 6",
                            CustomerName = "Customer 6",
                            Email = "customer6@example.com",
                            Phone = "0987654306"
                        },
                        new
                        {
                            CustomerID = 7,
                            Address = "Customer Address 7",
                            CustomerName = "Customer 7",
                            Email = "customer7@example.com",
                            Phone = "0987654307"
                        },
                        new
                        {
                            CustomerID = 8,
                            Address = "Customer Address 8",
                            CustomerName = "Customer 8",
                            Email = "customer8@example.com",
                            Phone = "0987654308"
                        },
                        new
                        {
                            CustomerID = 9,
                            Address = "Customer Address 9",
                            CustomerName = "Customer 9",
                            Email = "customer9@example.com",
                            Phone = "0987654309"
                        },
                        new
                        {
                            CustomerID = 10,
                            Address = "Customer Address 10",
                            CustomerName = "Customer 10",
                            Email = "customer10@example.com",
                            Phone = "0987654310"
                        });
                });

            modelBuilder.Entity("mart_management.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeID = 1,
                            Email = "employee1@example.com",
                            FullName = "Employee 1",
                            PasswordHash = "hash1",
                            Phone = "0991234501",
                            Role = "Stocker",
                            Username = "user1"
                        },
                        new
                        {
                            EmployeeID = 2,
                            Email = "employee2@example.com",
                            FullName = "Employee 2",
                            PasswordHash = "hash2",
                            Phone = "0991234502",
                            Role = "Cashier",
                            Username = "user2"
                        },
                        new
                        {
                            EmployeeID = 3,
                            Email = "employee3@example.com",
                            FullName = "Employee 3",
                            PasswordHash = "hash3",
                            Phone = "0991234503",
                            Role = "Admin",
                            Username = "user3"
                        },
                        new
                        {
                            EmployeeID = 4,
                            Email = "employee4@example.com",
                            FullName = "Employee 4",
                            PasswordHash = "hash4",
                            Phone = "0991234504",
                            Role = "Cashier",
                            Username = "user4"
                        },
                        new
                        {
                            EmployeeID = 5,
                            Email = "employee5@example.com",
                            FullName = "Employee 5",
                            PasswordHash = "hash5",
                            Phone = "0991234505",
                            Role = "Stocker",
                            Username = "user5"
                        },
                        new
                        {
                            EmployeeID = 6,
                            Email = "employee6@example.com",
                            FullName = "Employee 6",
                            PasswordHash = "hash6",
                            Phone = "0991234506",
                            Role = "Admin",
                            Username = "user6"
                        },
                        new
                        {
                            EmployeeID = 7,
                            Email = "employee7@example.com",
                            FullName = "Employee 7",
                            PasswordHash = "hash7",
                            Phone = "0991234507",
                            Role = "Stocker",
                            Username = "user7"
                        },
                        new
                        {
                            EmployeeID = 8,
                            Email = "employee8@example.com",
                            FullName = "Employee 8",
                            PasswordHash = "hash8",
                            Phone = "0991234508",
                            Role = "Cashier",
                            Username = "user8"
                        },
                        new
                        {
                            EmployeeID = 9,
                            Email = "employee9@example.com",
                            FullName = "Employee 9",
                            PasswordHash = "hash9",
                            Phone = "0991234509",
                            Role = "Admin",
                            Username = "user9"
                        },
                        new
                        {
                            EmployeeID = 10,
                            Email = "employee10@example.com",
                            FullName = "Employee 10",
                            PasswordHash = "hash10",
                            Phone = "0991234510",
                            Role = "Cashier",
                            Username = "user10"
                        });
                });

            modelBuilder.Entity("mart_management.Inventory", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductID");

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            QuantityInStock = 51
                        },
                        new
                        {
                            ProductID = 2,
                            QuantityInStock = 52
                        },
                        new
                        {
                            ProductID = 3,
                            QuantityInStock = 53
                        },
                        new
                        {
                            ProductID = 4,
                            QuantityInStock = 54
                        },
                        new
                        {
                            ProductID = 5,
                            QuantityInStock = 55
                        },
                        new
                        {
                            ProductID = 6,
                            QuantityInStock = 56
                        },
                        new
                        {
                            ProductID = 7,
                            QuantityInStock = 57
                        },
                        new
                        {
                            ProductID = 8,
                            QuantityInStock = 58
                        },
                        new
                        {
                            ProductID = 9,
                            QuantityInStock = 59
                        },
                        new
                        {
                            ProductID = 10,
                            QuantityInStock = 60
                        });
                });

            modelBuilder.Entity("mart_management.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AmountPaid")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SaleID")
                        .HasColumnType("INTEGER");

                    b.HasKey("PaymentID");

                    b.HasIndex("SaleID");

                    b.ToTable("Payements");

                    b.HasData(
                        new
                        {
                            PaymentID = 1,
                            AmountPaid = 101.0,
                            PaymentDate = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Cash",
                            SaleID = 1
                        },
                        new
                        {
                            PaymentID = 2,
                            AmountPaid = 102.0,
                            PaymentDate = new DateTime(2023, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Cash",
                            SaleID = 2
                        },
                        new
                        {
                            PaymentID = 3,
                            AmountPaid = 103.0,
                            PaymentDate = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Cash",
                            SaleID = 3
                        },
                        new
                        {
                            PaymentID = 4,
                            AmountPaid = 104.0,
                            PaymentDate = new DateTime(2023, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Cash",
                            SaleID = 4
                        },
                        new
                        {
                            PaymentID = 5,
                            AmountPaid = 105.0,
                            PaymentDate = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Cash",
                            SaleID = 5
                        },
                        new
                        {
                            PaymentID = 6,
                            AmountPaid = 106.0,
                            PaymentDate = new DateTime(2023, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Cash",
                            SaleID = 6
                        },
                        new
                        {
                            PaymentID = 7,
                            AmountPaid = 107.0,
                            PaymentDate = new DateTime(2023, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Cash",
                            SaleID = 7
                        },
                        new
                        {
                            PaymentID = 8,
                            AmountPaid = 108.0,
                            PaymentDate = new DateTime(2023, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Cash",
                            SaleID = 8
                        },
                        new
                        {
                            PaymentID = 9,
                            AmountPaid = 109.0,
                            PaymentDate = new DateTime(2023, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Cash",
                            SaleID = 9
                        },
                        new
                        {
                            PaymentID = 10,
                            AmountPaid = 110.0,
                            PaymentDate = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Cash",
                            SaleID = 10
                        });
                });

            modelBuilder.Entity("mart_management.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CostPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("REAL");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            CategoryID = 2,
                            CostPrice = 9.0,
                            ProductName = "Product 1",
                            ReorderLevel = 5,
                            Status = "Active",
                            Unit = "pcs",
                            UnitPrice = 11.0
                        },
                        new
                        {
                            ProductID = 2,
                            CategoryID = 3,
                            CostPrice = 10.0,
                            ProductName = "Product 2",
                            ReorderLevel = 5,
                            Status = "Active",
                            Unit = "pcs",
                            UnitPrice = 12.0
                        },
                        new
                        {
                            ProductID = 3,
                            CategoryID = 4,
                            CostPrice = 11.0,
                            ProductName = "Product 3",
                            ReorderLevel = 5,
                            Status = "Active",
                            Unit = "pcs",
                            UnitPrice = 13.0
                        },
                        new
                        {
                            ProductID = 4,
                            CategoryID = 5,
                            CostPrice = 12.0,
                            ProductName = "Product 4",
                            ReorderLevel = 5,
                            Status = "Active",
                            Unit = "pcs",
                            UnitPrice = 14.0
                        },
                        new
                        {
                            ProductID = 5,
                            CategoryID = 6,
                            CostPrice = 13.0,
                            ProductName = "Product 5",
                            ReorderLevel = 5,
                            Status = "Active",
                            Unit = "pcs",
                            UnitPrice = 15.0
                        },
                        new
                        {
                            ProductID = 6,
                            CategoryID = 7,
                            CostPrice = 14.0,
                            ProductName = "Product 6",
                            ReorderLevel = 5,
                            Status = "Active",
                            Unit = "pcs",
                            UnitPrice = 16.0
                        },
                        new
                        {
                            ProductID = 7,
                            CategoryID = 8,
                            CostPrice = 15.0,
                            ProductName = "Product 7",
                            ReorderLevel = 5,
                            Status = "Active",
                            Unit = "pcs",
                            UnitPrice = 17.0
                        },
                        new
                        {
                            ProductID = 8,
                            CategoryID = 9,
                            CostPrice = 16.0,
                            ProductName = "Product 8",
                            ReorderLevel = 5,
                            Status = "Active",
                            Unit = "pcs",
                            UnitPrice = 18.0
                        },
                        new
                        {
                            ProductID = 9,
                            CategoryID = 10,
                            CostPrice = 17.0,
                            ProductName = "Product 9",
                            ReorderLevel = 5,
                            Status = "Active",
                            Unit = "pcs",
                            UnitPrice = 19.0
                        },
                        new
                        {
                            ProductID = 10,
                            CategoryID = 1,
                            CostPrice = 18.0,
                            ProductName = "Product 10",
                            ReorderLevel = 5,
                            Status = "Active",
                            Unit = "pcs",
                            UnitPrice = 20.0
                        });
                });

            modelBuilder.Entity("mart_management.Purchase", b =>
                {
                    b.Property<int>("PurchaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SupplierID")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("REAL");

                    b.HasKey("PurchaseID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Purchases");

                    b.HasData(
                        new
                        {
                            PurchaseID = 1,
                            PurchaseDate = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierID = 1,
                            TotalAmount = 101.0
                        },
                        new
                        {
                            PurchaseID = 2,
                            PurchaseDate = new DateTime(2023, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierID = 2,
                            TotalAmount = 102.0
                        },
                        new
                        {
                            PurchaseID = 3,
                            PurchaseDate = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierID = 3,
                            TotalAmount = 103.0
                        },
                        new
                        {
                            PurchaseID = 4,
                            PurchaseDate = new DateTime(2023, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierID = 4,
                            TotalAmount = 104.0
                        },
                        new
                        {
                            PurchaseID = 5,
                            PurchaseDate = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierID = 5,
                            TotalAmount = 105.0
                        },
                        new
                        {
                            PurchaseID = 6,
                            PurchaseDate = new DateTime(2023, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierID = 6,
                            TotalAmount = 106.0
                        },
                        new
                        {
                            PurchaseID = 7,
                            PurchaseDate = new DateTime(2023, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierID = 7,
                            TotalAmount = 107.0
                        },
                        new
                        {
                            PurchaseID = 8,
                            PurchaseDate = new DateTime(2023, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierID = 8,
                            TotalAmount = 108.0
                        },
                        new
                        {
                            PurchaseID = 9,
                            PurchaseDate = new DateTime(2023, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierID = 9,
                            TotalAmount = 109.0
                        },
                        new
                        {
                            PurchaseID = 10,
                            PurchaseDate = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierID = 10,
                            TotalAmount = 110.0
                        });
                });

            modelBuilder.Entity("mart_management.PurchaseDetail", b =>
                {
                    b.Property<int>("PurchaseDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PurchaseID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Subtotal")
                        .HasColumnType("REAL");

                    b.Property<double>("UnitCost")
                        .HasColumnType("REAL");

                    b.HasKey("PurchaseDetailID");

                    b.HasIndex("ProductID");

                    b.HasIndex("PurchaseID");

                    b.ToTable("PurchaseDetails");

                    b.HasData(
                        new
                        {
                            PurchaseDetailID = 1,
                            ProductID = 1,
                            PurchaseID = 1,
                            Quantity = 11,
                            Subtotal = 99.0,
                            UnitCost = 9.0
                        },
                        new
                        {
                            PurchaseDetailID = 2,
                            ProductID = 2,
                            PurchaseID = 2,
                            Quantity = 12,
                            Subtotal = 120.0,
                            UnitCost = 10.0
                        },
                        new
                        {
                            PurchaseDetailID = 3,
                            ProductID = 3,
                            PurchaseID = 3,
                            Quantity = 13,
                            Subtotal = 143.0,
                            UnitCost = 11.0
                        },
                        new
                        {
                            PurchaseDetailID = 4,
                            ProductID = 4,
                            PurchaseID = 4,
                            Quantity = 14,
                            Subtotal = 168.0,
                            UnitCost = 12.0
                        },
                        new
                        {
                            PurchaseDetailID = 5,
                            ProductID = 5,
                            PurchaseID = 5,
                            Quantity = 15,
                            Subtotal = 195.0,
                            UnitCost = 13.0
                        },
                        new
                        {
                            PurchaseDetailID = 6,
                            ProductID = 6,
                            PurchaseID = 6,
                            Quantity = 16,
                            Subtotal = 224.0,
                            UnitCost = 14.0
                        },
                        new
                        {
                            PurchaseDetailID = 7,
                            ProductID = 7,
                            PurchaseID = 7,
                            Quantity = 17,
                            Subtotal = 255.0,
                            UnitCost = 15.0
                        },
                        new
                        {
                            PurchaseDetailID = 8,
                            ProductID = 8,
                            PurchaseID = 8,
                            Quantity = 18,
                            Subtotal = 288.0,
                            UnitCost = 16.0
                        },
                        new
                        {
                            PurchaseDetailID = 9,
                            ProductID = 9,
                            PurchaseID = 9,
                            Quantity = 19,
                            Subtotal = 323.0,
                            UnitCost = 17.0
                        },
                        new
                        {
                            PurchaseDetailID = 10,
                            ProductID = 10,
                            PurchaseID = 10,
                            Quantity = 20,
                            Subtotal = 360.0,
                            UnitCost = 18.0
                        });
                });

            modelBuilder.Entity("mart_management.Sale", b =>
                {
                    b.Property<int>("SaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("REAL");

                    b.HasKey("SaleID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            SaleID = 1,
                            CustomerID = 1,
                            PaymentMethod = "Cash",
                            SaleDate = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 201.0
                        },
                        new
                        {
                            SaleID = 2,
                            CustomerID = 2,
                            PaymentMethod = "Cash",
                            SaleDate = new DateTime(2023, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 202.0
                        },
                        new
                        {
                            SaleID = 3,
                            CustomerID = 3,
                            PaymentMethod = "Cash",
                            SaleDate = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 203.0
                        },
                        new
                        {
                            SaleID = 4,
                            CustomerID = 4,
                            PaymentMethod = "Cash",
                            SaleDate = new DateTime(2023, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 204.0
                        },
                        new
                        {
                            SaleID = 5,
                            CustomerID = 5,
                            PaymentMethod = "Cash",
                            SaleDate = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 205.0
                        },
                        new
                        {
                            SaleID = 6,
                            CustomerID = 6,
                            PaymentMethod = "Cash",
                            SaleDate = new DateTime(2023, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 206.0
                        },
                        new
                        {
                            SaleID = 7,
                            CustomerID = 7,
                            PaymentMethod = "Cash",
                            SaleDate = new DateTime(2023, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 207.0
                        },
                        new
                        {
                            SaleID = 8,
                            CustomerID = 8,
                            PaymentMethod = "Cash",
                            SaleDate = new DateTime(2023, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 208.0
                        },
                        new
                        {
                            SaleID = 9,
                            CustomerID = 9,
                            PaymentMethod = "Cash",
                            SaleDate = new DateTime(2023, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 209.0
                        },
                        new
                        {
                            SaleID = 10,
                            CustomerID = 10,
                            PaymentMethod = "Cash",
                            SaleDate = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 210.0
                        });
                });

            modelBuilder.Entity("mart_management.SaleDetail", b =>
                {
                    b.Property<int>("SaleDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SaleID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Subtotal")
                        .HasColumnType("REAL");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("REAL");

                    b.HasKey("SaleDetailID");

                    b.HasIndex("ProductID");

                    b.HasIndex("SaleID");

                    b.ToTable("SaleDetails");

                    b.HasData(
                        new
                        {
                            SaleDetailID = 1,
                            ProductID = 1,
                            Quantity = 3,
                            SaleID = 1,
                            Subtotal = 48.0,
                            UnitPrice = 16.0
                        },
                        new
                        {
                            SaleDetailID = 2,
                            ProductID = 2,
                            Quantity = 4,
                            SaleID = 2,
                            Subtotal = 68.0,
                            UnitPrice = 17.0
                        },
                        new
                        {
                            SaleDetailID = 3,
                            ProductID = 3,
                            Quantity = 5,
                            SaleID = 3,
                            Subtotal = 90.0,
                            UnitPrice = 18.0
                        },
                        new
                        {
                            SaleDetailID = 4,
                            ProductID = 4,
                            Quantity = 6,
                            SaleID = 4,
                            Subtotal = 114.0,
                            UnitPrice = 19.0
                        },
                        new
                        {
                            SaleDetailID = 5,
                            ProductID = 5,
                            Quantity = 7,
                            SaleID = 5,
                            Subtotal = 140.0,
                            UnitPrice = 20.0
                        },
                        new
                        {
                            SaleDetailID = 6,
                            ProductID = 6,
                            Quantity = 8,
                            SaleID = 6,
                            Subtotal = 168.0,
                            UnitPrice = 21.0
                        },
                        new
                        {
                            SaleDetailID = 7,
                            ProductID = 7,
                            Quantity = 9,
                            SaleID = 7,
                            Subtotal = 198.0,
                            UnitPrice = 22.0
                        },
                        new
                        {
                            SaleDetailID = 8,
                            ProductID = 8,
                            Quantity = 10,
                            SaleID = 8,
                            Subtotal = 230.0,
                            UnitPrice = 23.0
                        },
                        new
                        {
                            SaleDetailID = 9,
                            ProductID = 9,
                            Quantity = 11,
                            SaleID = 9,
                            Subtotal = 264.0,
                            UnitPrice = 24.0
                        },
                        new
                        {
                            SaleDetailID = 10,
                            ProductID = 10,
                            Quantity = 12,
                            SaleID = 10,
                            Subtotal = 300.0,
                            UnitPrice = 25.0
                        });
                });

            modelBuilder.Entity("mart_management.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SupplierID");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            SupplierID = 1,
                            Address = "Address 1",
                            ContactPerson = "Contact 1",
                            Email = "supplier1@example.com",
                            Phone = "0123456701",
                            SupplierName = "Supplier 1"
                        },
                        new
                        {
                            SupplierID = 2,
                            Address = "Address 2",
                            ContactPerson = "Contact 2",
                            Email = "supplier2@example.com",
                            Phone = "0123456702",
                            SupplierName = "Supplier 2"
                        },
                        new
                        {
                            SupplierID = 3,
                            Address = "Address 3",
                            ContactPerson = "Contact 3",
                            Email = "supplier3@example.com",
                            Phone = "0123456703",
                            SupplierName = "Supplier 3"
                        },
                        new
                        {
                            SupplierID = 4,
                            Address = "Address 4",
                            ContactPerson = "Contact 4",
                            Email = "supplier4@example.com",
                            Phone = "0123456704",
                            SupplierName = "Supplier 4"
                        },
                        new
                        {
                            SupplierID = 5,
                            Address = "Address 5",
                            ContactPerson = "Contact 5",
                            Email = "supplier5@example.com",
                            Phone = "0123456705",
                            SupplierName = "Supplier 5"
                        },
                        new
                        {
                            SupplierID = 6,
                            Address = "Address 6",
                            ContactPerson = "Contact 6",
                            Email = "supplier6@example.com",
                            Phone = "0123456706",
                            SupplierName = "Supplier 6"
                        },
                        new
                        {
                            SupplierID = 7,
                            Address = "Address 7",
                            ContactPerson = "Contact 7",
                            Email = "supplier7@example.com",
                            Phone = "0123456707",
                            SupplierName = "Supplier 7"
                        },
                        new
                        {
                            SupplierID = 8,
                            Address = "Address 8",
                            ContactPerson = "Contact 8",
                            Email = "supplier8@example.com",
                            Phone = "0123456708",
                            SupplierName = "Supplier 8"
                        },
                        new
                        {
                            SupplierID = 9,
                            Address = "Address 9",
                            ContactPerson = "Contact 9",
                            Email = "supplier9@example.com",
                            Phone = "0123456709",
                            SupplierName = "Supplier 9"
                        },
                        new
                        {
                            SupplierID = 10,
                            Address = "Address 10",
                            ContactPerson = "Contact 10",
                            Email = "supplier10@example.com",
                            Phone = "0123456710",
                            SupplierName = "Supplier 10"
                        });
                });

            modelBuilder.Entity("mart_management.Inventory", b =>
                {
                    b.HasOne("mart_management.Product", "Product")
                        .WithOne("Inventory")
                        .HasForeignKey("mart_management.Inventory", "ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("mart_management.Payment", b =>
                {
                    b.HasOne("mart_management.Sale", "Sale")
                        .WithMany("Payments")
                        .HasForeignKey("SaleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("mart_management.Product", b =>
                {
                    b.HasOne("mart_management.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("mart_management.Purchase", b =>
                {
                    b.HasOne("mart_management.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("mart_management.PurchaseDetail", b =>
                {
                    b.HasOne("mart_management.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mart_management.Purchase", "Purchase")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("PurchaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("mart_management.Sale", b =>
                {
                    b.HasOne("mart_management.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("mart_management.SaleDetail", b =>
                {
                    b.HasOne("mart_management.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mart_management.Sale", "Sale")
                        .WithMany("SaleDetails")
                        .HasForeignKey("SaleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("mart_management.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("mart_management.Customer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("mart_management.Product", b =>
                {
                    b.Navigation("Inventory")
                        .IsRequired();
                });

            modelBuilder.Entity("mart_management.Purchase", b =>
                {
                    b.Navigation("PurchaseDetails");
                });

            modelBuilder.Entity("mart_management.Sale", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("SaleDetails");
                });

            modelBuilder.Entity("mart_management.Supplier", b =>
                {
                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
